#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEFAULT 0
#define NAV 1
#define NUM 2
#define GAME 3

#define KEYS_L 0 1 2 3 4 5 12 13 14 15 16 17 23 24 25 26 27 28 29
#define KEYS_R 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35
#define KEYS_T 36 37 38 39 40 41

&lt {
    quick_tap_ms = <200>;
    flavor = "hold-preferred";
};
&mt { quick_tap_ms = <200>; };

/ {
    chosen {
        zmk,matrix_transform = &default_transform;
    };
};

/ {
        behaviors {
                lpht: left_positional_hold_tap {
                        compatible = "zmk,behavior-hold-tap";
                        #binding-cells = <2>;
                        flavor = "balanced";
                        tapping-term-ms = <500>;
                        quick-tap-ms = <0>;
                        bindings = <&kp>, <&kp>;
                        hold-trigger-key-positions = <KEYS_R KEYS_T>;
                        hold-trigger-on-release;
                };
                rpht: right_positional_hold_tap {
                        compatible = "zmk,behavior-hold-tap";
                        #binding-cells = <2>;
                        flavor = "balanced";
                        tapping-term-ms = <500>;
                        quick-tap-ms = <0>;
                        bindings = <&kp>, <&kp>;
                        hold-trigger-key-positions = <KEYS_L KEYS_T>;
                        hold-trigger-on-release;
                };
                doco: dot_colon {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&kp DOT>, <&kp COLON>;
                        mods = <(MOD_LSFT)>;
                };
                cose: comma_semicolon {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&kp COMMA>, <&kp SEMI>;
                        mods = <(MOD_LSFT)>;
                };
                unda: underscore_dash {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&kp UNDER>, <&kp KP_MINUS>;
                        mods = <(MOD_LSFT)>;
                };
                para: parantheses {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&kp LPAR>, <&kp RPAR>;
                        mods = <(MOD_LSFT)>;
                };
                qout: qoutes {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&kp DQT>, <&kp SQT>;
                        mods = <(MOD_LSFT)>;
                };
                cubr: curly_braces {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&kp LBRC>, <&kp RBRC>;
                        mods = <(MOD_LSFT)>;
                };
                sqbr: square_brackets {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&kpLBKT>, <&kp RBKT>;
                        mods = <(MOD_LSFT)>;
                };
                slas: slashes {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&kp FSLH>, <&kp BSLH>;
                        mods = <(MOD_LSFT)>;
                };
                anbr: angle_brackets {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&kp LT>, <&kp GT>;
                        mods = <(MOD_LSFT)>;
                };
                quex: question_exclamation {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&kp QMARK>, <&kp EXCL>;
                        mods = <(MOD_LSFT)>;
                };
                bade: backspace_delete {
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&kp BSPC>, <&kp DEL>;
                        mods = <(MOD_LSFT)>;
                };
                laycap: layer_capsword {
                    compatible = "zmk,behavior-hold-tap";
                    #binding-cells = <2>;
                    flavor = "hold-preferred";
                    tapping-term-ms = <200>;
                    bindings = <&mo>, <&caps_word>;
                };
        };

        macros {
                tilde: tilde {
                        label = "macro_tilde";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings = <&kp RA(RBKT) &kp RA(RBKT)>;
                };
                btick: btick {
                        label = "macro_btick";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings = <&kp PLUS &kp PLUS>;
                };
                hat: hat {
                        label = "macro_hat";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings = <&kp RBRC &kp RBRC>;
                };
        };

        combos {
                compatible = "zmk,combos";
                combo_sqbr {
                        timeout-ms = <30>;
                        key-positions = <2 3>;
                        bindings = <&sqbr>;
                };
                combo_para {
                        timeout-ms = <30>;
                        key-positions = <3 4>;
                        bindings = <&para>;
                };
                combo_game {
                        timeout-ms = <30>;
                        key-positions = <7 8>;
                        bindings = <&tog GAME>;
                };
                combo_slas {
                        timeout-ms = <30>;
                        key-positions = <8 9>;
                        bindings = <&slas>;
                };
                combo_anbr {
                        timeout-ms = <30>;
                        key-positions = <26 27>;
                        bindings = <&anbr>;
                };
                combo_cubr {
                        timeout-ms = <30>;
                        key-positions = <27 28>;
                        bindings = <&cubr>;
                };
                combo_unda {
                        timeout-ms = <30>;
                        key-positions = <31 32>;
                        bindings = <&unda>;
                };
                combo_caps_word {
                        timeout-ms = <30>;
                        key-positions = <32 33>;
                        bindings = <&caps_word>;
                };
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        bindings = <
&kp ESC        &kp Q         &kp W         &kp F         &kp P         &kp G                   &kp J           &kp L         &kp U          &kp Y         &qout         &kp LBKT
&lpht LWIN F12 &lpht LCMD A  &lpht LALT R  &lpht LCTRL S &lpht LSHFT T &kp D                   &kp H           &rpht LSHFT N &rpht LCTRL E  &rpht LALT I  &rpht LCMD O  &rpht LWIN SQT
&btick         &kp Z         &kp X         &kp C         &kp V         &kp B                   &kp K           &kp M         &doco          &cose         &quex         &kp SEMI
                                           &laycap NAV 0 &kp TAB       &bade                   &kp SPACE       &kp RET       &mo NUM
                        >;
                };

                nav_layer {
                        bindings = <
&none          &none         &none         &bt BT_CLR    &bt BT_SEL 0  &bt BT_SEL 1             &kp STAR       &kp C_PP      &kp C_VOL_DN   &kp C_VOL_UP  &kp MINUS     &kp AMPS
&trans         &trans        &trans        &trans        &trans        &trans                   &kp PIPE       &kp LEFT      &kp RIGHT      &kp UP        &kp DOWN      &kp CARET
&none          &none         &none         &none         &none         &none                    &kp AT         &kp EQUAL     &kp HASH       &kp DLLR      &kp PRCNT     &kp TILDE
                                           &none         &kp TAB       &bade                    &kp SPACE      &kp RET       &none
                        >;
                };

                num_layer {
                        bindings = <
&none          &kp F1        &kp F2        &kp F3         &kp F4         &kp F5                  &kp F6        &kp F7         &kp F8         &kp F9        &kp F10       &kp F11
&kp LWIN       &lpht LCMD N1 &lpht LALT N2 &lpht LCTRL N3 &lpht LSHFT N4 &kp N5                  &kp N6        &rpht LSHFT N7 &rpht LCTRL N8 &rpht LALT N9 &rpht LCMD N0 &kp LWIN
&none          &none         &none         &none          &none          &none                   &none         &none          &none          &none         &none         &none
                                           &none          &kp TAB        &bade                   &kp SPACE     &kp RET        &none
                        >;
                };

                game_layer {
                        bindings = <
&kp TAB       &kp Q        &kp W        &kp E        &kp R        &kp T                   &kp Y         &kp U         &kp I          &kp O         &kp P         &kp ESC
&kp CAPS      &kp A        &kp S        &kp D        &kp F        &kp G                   &kp H         &kp J         &kp K          &kp L         &none         &none
&kp LSHFT     &kp Z        &kp X        &kp C        &kp V        &kp B                   &kp N         &kp M         &kp COMMA      &kp DOT       &kp MINUS     &none
                                        &kp LALT     &kp LCTRL    &kp SPACE               &none         &none         &none
                        >;
                };
        };
};
